create database case_study_1
use  case_study_1

--Problem Statement:
--You are a database administrator.
--You want to use the data to answer afewquestions about your customers,
--especially about the sales and profit comingfrom different states, money spent in marketing
--and various other factorssuchasCOGS (Cost of Goods Sold), budget profit etc.
--You plan on using theseinsightsto help find out which items are being sold the most.
--You have beenprovidedwith the sample of the overall customer data due to privacy issues.
--But youhopethat these samples are enough for you to write fully functioning SQLqueriestohelp answer the questions.
--Dataset:
--The 3 key datasets for this case study:
--a. FactTable: The Fact Table has 14 columns mentioned belowand4200rows.
--Date, ProductID, Profit, Sales, Margin, COGS, Total Expenses, Marketing, Inventory,
--Budget Profit, Budget COGS, Budget Margin, Budget
--Sales, and Area Code
--Note: COGS stands for Cost of Goods Sold
--b. ProductTable: The ProductTable has four columns named Product Type,
--Product, ProductID, and Type. It has 13 rows which can be brokendowninto further details to
--retrieve the information mentioned in theFactTable. c. LocationTable: Finally, the LocationTable
--has 156 rows andfollowsasimilar approach to ProductTable. It has four columns named AreaCode, State, Market,
--and Market Size. Tasks to be performed:

--1. Display the number of states present in the LocationTable.
select * from Location
select count(State) as no_of_states from location

--How many products are of regular type?
select * from Product
select count(Type) as rglr_type from Product where Type = 'Regular'

--3. How much spending has been done on marketing of product ID 1?
select sum(Marketing) as total_spending from fact where ProductID = '1'

--What is the minimum sales of a product?
select * from fact
select min(Sales) as min_sales from fact

----Display the max Cost of Good Sold (COGS).
select max(COGS) as max_COGS from fact

--Display the details of the product where product type is coffee.
select * from Product
select * from Product where Product_Type = 'Coffee'

--Display the details where total expenses are greater than 40
select * from fact where Total_Expenses > 40

--8. What is the average sales in area code 719?
select avg(sales) as avg_sales from fact where Area_Code = 719

--Find out the total profit generated by Colorado state.
select sum(profit) as total_Profit from fact as F inner join
Location as L on L.Area_Code = F.Area_Code where State = 'Colorado'

--Display the average inventory for each product ID.
select ProductId,avg(Inventory) as avg_inventory from fact group by ProductId order by ProductId

--Display state in a sequential order in a Location Table
select * from location order by State

--Display the average budget of the Product where the average budget
--margin should be greater than 100.
select Product,avg(Budget_Margin) as avg_budget from fact as F 
inner join Product as P on P.ProductId = F.ProductId 
group by Product having avg(Budget_Margin) > 100

--What is the total sales done on date 2010-01-01?
select * from fact
select sum(Sales) as total_Sales from fact where Date = '2010-01-01'

--Display the average total expense of each product ID on an individual date.
select Date,ProductId, avg(Total_Expenses) as avg_expense from fact group by Date,ProductId order by Date

--Display the table with the following attributes such as date, productID, 
--product_type, product, sales, profit, state, area_code

select f.Date, f.ProductId, 
Product_Type, product, sales, Profit, State, f.Area_Code from fact as F 
 inner join location as L on F.Area_Code = L.Area_Code inner join Product as P on P.ProductId = F.ProductId

 --. Display the rank without any gap to show the sales wise rank.

 select * from fact
WITH Sales_rank AS (
    SELECT 
        ProductId, Sales,
        Dense_Rank() OVER (ORDER BY sales DESC) AS Sales_rank
    FROM fact 
)
SELECT *
FROM Sales_rank
WHERE row_num <= 5;

--Find the state wise profit and sales
select * from fact

select L.State, sum(F.Profit) as Profit,sum( F.Sales) as Sales from fact as F 
inner join Location as L on L.Area_Code = F.Area_Code
group by State  
Order by State

--Find the state wise profit and sales along with the productname.
select L.State,P.Product , sum(F.Profit) as Profit,sum( F.Sales) as Sales from fact as F
inner join Location as L on L.Area_Code = F.Area_Code
inner join Product as P on P.ProductId = F.ProductId
group by State, Product
Order by State

--If there is an increase in sales of 5%, calculate the increasedsales
SELECT 
    ProductID,
    Sales,
    Sales * 1.05 AS IncreasedSales
FROM fact;

Find the maximum profit along with the product ID and producttype.
select top 1 P.ProductId, P.Product_Type, max(profit) as max_profit from fact as f
inner join Product as P on f.ProductId = P.ProductId
group by P.ProductId,P.Product_Type
--order by max_profit desc

--Create a stored procedure to fetch the result according to the product typefrom Product Table.
create procedure Product_type_detail

@Product_type nvarchar (34)
as begin
select * from Product 
where Product_Type = @Product_type
end
exec Product_type_detail @Product_type = 'coffee'
select * from Product

--Write a query by creating a condition in which 
--if the total expenses is lessthan60 then it is a profit or else loss.

select Total_Expenses, case 
when Total_Expenses < 60 then 'profit'
else 'loss'
end as p_l
from fact

--Give the total weekly sales value with the date and product IDdetails.
--Useroll-up to pull the data in hierarchical order.

select * from Fact
select Date, ProductId, Sales from Fact
where Date = GETDATE(day() , DAY as weekly_sales)

SELECT 
    DATEPART(WEEK, Date) AS WeekNumber,
    ProductID,
    Date,
    SUM(Sales) AS TotalSales
FROM Fact
GROUP BY ROLLUP (DATEPART(WEEK, Date), ProductID, Date);

--Apply union and intersection operator on the tables which consist of
--attribute area code
select Area_Code from fact
union
select Area_Code from Location
select Area_Code from fact
Intersect
select Area_Code from Location

--Create a user-defined function for the product table to fetch a particular
--product type based upon 
CREATE FUNCTION fn_GetProductsByType (
    @ProductType NVARCHAR(50)
)
RETURNS TABLE
AS
RETURN
(
    SELECT *
    FROM Product
    WHERE Product_Type = @ProductType
);
SELECT *
FROM dbo.fn_GetProductsByType('Coffee');

--Change the product type from coffee to tea where product IDis 1 andundoit.
select * from Product
Begin Transaction
Update Product
set Product_Type = 'Tea'
where Product_Type = 'Coffee'
Rollback Transaction

--Display the date, product ID and sales where total expenses are
--between 100 to 200.
select Total_Expenses,Date, ProductId, Sales from fact where Total_Expenses between 100 and 200

--Delete the records in the Product Table for regular type.
delete Product
where type = 'Regular' 
select * from Product

--Display the ASCII value of the fifth character from the columnProduct.
SELECT 
    Product,
    ASCII(SUBSTRING(Product, 5, 1)) AS FifthCharASCII
FROM Product;


